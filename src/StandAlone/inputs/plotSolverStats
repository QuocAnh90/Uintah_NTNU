#!/bin/csh -f
#______________________________________________________________________
#  This script parses sus output and plots relevant hypre solver quantities
#
#  This requires gnuplot 3.8 or greater.
#______________________________________________________________________
/bin/rm -rf scraps >&/dev/null

mkdir scraps >&/dev/null

cat << EOF > scraps/usage
Usage: $0

OPTIONS:
     --file          <output file> [ manditory]  Name of the outputfile to parse
     --timestepRange <low:high>    [ optional ]  x-axis range
     --pdf                         [ optional ]  output a pdf file
EOF

set tmp = (`which gnuplot`)

if ( $status ) then
  echo " ERROR: Could not find gnuplot"
  exit(0)
endif


if( $#argv == 0 ) then
  cat scraps/usage
  exit(1)
endif
#__________________________
# parse inputs
set hardcopy = "n"
set Xrange   = ":"
set out      = "null"

while ($#argv)
  set opt  = $2
  switch ($1:q)

   case --file:
      set out = "$opt"
      shift; shift;
      breaksw
   case --timestepRange:
      set Xrange = "$opt"
      shift; shift
      breaksw
   case --pdf:
      set hardcopy = "y"
      shift;
      breaksw
   case " ":
      shift
      break
   default:
      echo "Error: ($1) is not a valid option.  Now exiting"
      cat scraps/usage
      exit (1)
  endsw
end

if ( !(-e $out) ) then
  echo "Couldn't find the file ($out)"
  echo " Now exiting"
  exit(1)
endif

set xLo = `echo "$Xrange" | cut -d":" -f1`
set xHi = `echo "$Xrange" | cut -d":" -f2`
echo "xLo: $xLo xHi: $xHi out: $out hardcopy: $hardcopy"

unalias rm
#__________________________________
# remove your droppings and make a copy of the output file
/bin/rm -rf scraps

mkdir scraps >&/dev/null
cp $out scraps/tmp
cd scraps

grep Time= tmp |grep Mem >& rawData.clean

#__________________________________
# Parse the output file.  This is gross
echo "Now extracting the data"

grep "solve only" tmp   |  cut -d: -f2 | awk '{print $1}' >& solverTime
grep "solve only" tmp   |  awk '{ match ($0, "solve only"); print substr($0, RSTART) }' | awk '{print $(NF -4)}' >& solverIters

grep Timestep    rawData.clean | cut -d" " -f2 | awk '{print $1}' >& timestep
grep "Wall Time" rawData.clean | cut -d"=" -f4 | awk '{print $1}' >& elapsedTime
grep EMA         rawData.clean | cut -d"=" -f5 | awk '{print $1}' >& meanTime

paste -d "  " timestep elapsedTime meanTime solverTime solverIters >& data
sed  -i s/","//g data    # eliminate any ","

# prune data file if this is requested
if( $xLo != "" && $xHi != "" ) then
  echo " Now pruning data from $xLo -> $xHi"
  awk -v xLo=$xLo -v xHi=$xHi '{ if ( $1 >= xLo && $1 <= xHi ) print }' data > data.pruned
  cp data.pruned data
endif

echo "Done extracting data"

@ procs     = `grep "MPI processes" tmp | awk '{print $2}'`
@ threads   = `grep "threads per MPI process" tmp | awk '{print $2}'`

set machine = `grep Machine    tmp | cut -d":" -f 2`
set date    = `grep -m1 Date   tmp | cut -d" " -f2-8,10`
set uda     = `grep "DataArchiver created" tmp | awk '{print $3}'`
echo "Done extracting data"

#______________________________________________________________________
#  create the gnuplot script

touch gp
#__________________________________
# if making a hardcopy
if( $hardcopy == "y" || $hardcopy == "Y" ) then
echo "Generating the postscript file plotSolverStats.ps"

cat >> gp << fin
set terminal postscript color solid "Times-Roman" 12
set output "plotSolverStats.ps"
fin
else
cat >> gp << fin
set terminal x11 font "fixed,bold,12" size 1024,768
fin
endif

cat >> gp << fin

#__________________________________
# compute stats this version of gnuplot is > 3.8
if ( strstrt(GPVAL_COMPILE_OPTIONS,"+STATS") ) {
  print "Computing the statistics of the mean time per timestep";
} else {
  print " This version of gnuplot does not support computing statistics.";
  print " Now exiting...."
  exit
}

# compute statistics of mean time and scale the results
#    1         2         3         4          5
#timestep elapsedTime meanTime solverTime solverIters
stats 'data' using 3 name "A";
stats 'data' using 4 name "B";
stats 'data' using 5 name "C";

set multiplot
set size   1.0, 0.33
set autoscale
set origin 0.0, 0.666
set grid xtics ytics

set title "$date, $machine, $procs MPI ranks, $threads Threads, uda: $uda"
set xlabel 'Timesteps'
set ylabel 'Time [s]'        textcolor lt 2
set yrange[A_lo_quartile - A_median:A_up_quartile + A_median]

plot 'data' using 1:3   t 'meanTime/timestep' with lines

#__________________________________
unset title
set yrange[B_lo_quartile - B_median:B_up_quartile + B_median]
set ylabel 'Solver Time [s]' textcolor lt 2
set origin 0.0,0.333

plot 'data' using 1:4  t 'solver Time ' with lines

#__________________________________
set origin 0.0,0.0
set ylabel 'Solver iterations'
set yrange[C_lo_quartile - C_stddev -1 :C_up_quartile + C_stddev + 1]

plot 'data' using 1:5 t 'solver iterations' with lines

set nomultiplot
fin

if( $hardcopy == "n") then
  echo "pause -1 'Hit return to exit'" >> gp
endif

#__________________________________
# plot it up
gnuplot gp

if($hardcopy == "y" || $hardcopy == "Y") then
  echo "converting PostScript files to PDF"
  ps2pdf plotSolverStats.ps
  mv plotSolverStats* ../.
endif

#__________________________________
# clean up
/bin/rm -rf scraps

exit(0)
