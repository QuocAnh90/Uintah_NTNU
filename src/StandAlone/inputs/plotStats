#!/bin/csh -f
#______________________________________________________________________
#  This script parses sus output and plots it using gnuplot.
#  This requires gnuplot 3.8 or greater.
#______________________________________________________________________

/bin/rm -rf scraps >&/dev/null

mkdir scraps >&/dev/null

cat << EOF > scraps/usage
Usage: $0
 
OPTIONS:
     --file          <output file> [ manditory]  Name of the outputfile to parse
     --timestepRange <low:high>    [ optional ]  x-axis range
     --pdf                         [ optional ]  output a pdf file  
EOF

set tmp = (`which gnuplot`)

if ( $status ) then
  echo " ERROR: Could not find gnuplot"
  exit(0)
endif

if( $#argv == 0 ) then
  cat scraps/usage
  exit(1)
endif

#__________________________________
# parse inputs
set hardcopy = "n"
set Xrange   = ":"
set out      = "null"

while ($#argv)
  set opt  = $2
  switch ($1:q)

   case --file:
      set out = "$opt"
      shift; shift;
      breaksw
   case --timestepRange:
      set Xrange = "$opt"
      shift; shift
      breaksw
   case --pdf:
      set hardcopy = "y"
      shift;
      breaksw
   case " ":
      shift
      break
   default:
      echo "Error: ($1) is not a valid option.  Now exiting"
      cat scraps/usage
      exit (1)
  endsw 
end

if ( !(-e $out) ) then
  echo "Couldn't find the file ($out)"
  echo " Now exiting"
  exit(1)
endif

set xLo = `echo "$Xrange" | cut -d":" -f1`
set xHi = `echo "$Xrange" | cut -d":" -f2`
echo "xLo: $xLo xHi: $xHi out: $out hardcopy: $hardcopy"

unalias rm
#__________________________________
# Make a copy of the output file
/usr/bin/rm -rf scraps
mkdir scraps >&/dev/null
cp $out scraps/tmp
cd scraps

grep Time= tmp |grep Mem >& rawData.clean

#______________________________________________________________________
# Parse the output file.  This is gross
echo "Now extracting the data"

grep Timestep    rawData.clean | cut -d" " -f2 | awk '{print $1}' >& timestep
grep "Wall Time" rawData.clean | cut -d"=" -f4 | awk '{print $1}' >& elapsedTime
grep EMA  rawData.clean        | cut -d"=" -f5 | awk '{print $1}' >& meanTime
grep Time rawData.clean        | cut -d"=" -f2 | awk '{print $1}' >& physicalTime
grep delT rawData.clean        | cut -d"=" -f3 | awk '{print $1}' >& delT

grep Memory rawData.clean      | cut -d"=" -f6 | awk '{print $1}'  > memAve
grep Memory rawData.clean      | cut -d"=" -f6 | awk '{print $4}'  > memMax

awk 'NR>1{ printf("%.15f\n",$1-p)} {p=$1}' elapsedTime >& timePerTimestep
echo "?" >> timePerTimestep


paste -d "  " timestep elapsedTime meanTime timePerTimestep physicalTime delT memAve memMax>& data
sed  -i s/","//g data    # eliminate any ","


# prune data file if this is requested
if( $xLo != "" && $xHi != "" ) then
  echo " Now pruning data from $xLo -> $xHi"
  awk -v xLo=$xLo -v xHi=$xHi '{ if ( $1 >= xLo && $1 <= xHi ) print }' data > data.pruned
  cp data.pruned data
endif


@ procs     = `grep "MPI processes" tmp | awk '{print $2}'`
@ threads   = `grep "threads per MPI process" tmp | awk '{print $2}'`
set machine = `grep Machine    tmp | cut -d":" -f 2`
set date    = `grep -m1 Date   tmp | cut -d" " -f2-8,10`
set uda     = `grep "DataArchiver created" tmp | awk '{print $3}'`

echo "Done extracting data"

#______________________________________________________________________
#  create the gnuplot script

echo "" > gp

#__________________________________
# if making a hardcopy
if( $hardcopy == "y" || $hardcopy == "Y" ) then
echo "Generating the postscript file plotStats.ps"
/bin/rm gp
cat > gp << fin
set terminal x11 1
set terminal postscript color solid "Times-Roman" 12
set output "plotStat.ps"
fin
else
cat > gp << fin
set terminal x11 font "fixed,bold,12" size 1024,768
fin
endif


cat >> gp << fin

#__________________________________
# compute stats this version of gnuplot is > 3.8

if ( strstrt(GPVAL_COMPILE_OPTIONS,"+STATS") ) {
  print "Computing the statistics of the mean time per timestep"; 
} else {
  print " This version of gnuplot does not support computing statistics.";
  print " Now exiting...."
  exit
}

#     1        2          3            4            5          6    7      8
# timestep elapsedTime meanTime timePerTimestep physicalTime delT memAve memMax
stats 'data' using 5 name "A";
stats 'data' using 3 name "B";
stats 'data' using 4 name "C";
stats 'data' using 7 name "D";
stats 'data' using 8 name "E";


set multiplot
set size 1.0,0.33 # for three plots
set autoscale
set grid xtics ytics


#__________________________________ TOP
set size   1.0, 0.33
set origin 0.0, 0.66
set title "$date, $machine, $procs MPI ranks, $threads Threads, uda: $uda"
set xlabel "Elaspsed Time [s]" offset 0,+0.5
set ylabel 'Delt'           textcolor lt 1
set y2label 'Physical Time' textcolor lt 2
set y2tics

set y2range[A_mean - 2*A_stddev:A_mean + 2*A_stddev]

plot 'data' using 2:6           t 'Delt' with lines,\
     'data' using 2:5 axes x1y2 t 'Physical Time' with lines

#__________________________________ Middle
set origin 0.0,0.33
set title ''
set xlabel "Timestep" offset 0,+0.5
set ylabel 'Mean Time/timestep' textcolor lt 1
set y2label 'Time per timestep [sec]'     textcolor lt 2
set y2tics
set autoscale
set yrange[0:B_up_quartile + B_stddev]
set y2range[0:C_up_quartile + C_median]

plot 'data' using 1:3           t 'meanTime/timestep' with lines, \
     'data' using 1:4 axes x1y2 t 'time/timestep' with lines


#__________________________________Bottom
set origin 0.0,0.0
set title ''
set xlabel "Elapsed Time [s]" offset 0,+0.5
set ylabel "Memory useage [MB]"
unset y2label
unset y2tics
set autoscale
set yrange[D_min - D_stddev:E_max + E_stddev]

plot 'data' using 2:7   t 'ave' with lines, \
     'data' using 2:8   t 'max' with lines
set nomultiplot
pause -1 "Hit return to exit"
fin


#__________________________________
# plot it up
gnuplot gp


if($hardcopy == "y" || $hardcopy == "Y") then
  echo "converting PostScript files to PDF"
  ps2pdf plotStat.ps
  mv plotStat* ../.
endif

#__________________________________
# clean up
/bin/rm -rf scraps

exit(0)
